{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["softShadows","word_list","split","reverse","Heart","props","useThree","camera","gl","x","useSpring","from","to","config","mass","tension","friction","delay","onRest","setAnimationFinished","group","useRef","heart","useLoader","GLTFLoader","nodes","materials","console","log","useEffect","current","scale","y","z","rotation","Math","PI","useFrame","clock","sin","elapsedTime","animationFinished","position","get","ref","dispose","visible","geometry","attach","color","roughness","metalness","LoveText","fontSize","children","maxWidth","lineHeight","textAlign","textref","React","Text","font","side","THREE","MyLight","lightRef","angle","intensity","castShadow","shadowMapWidth","shadowMapHeight","Word","useState","hovered","setHovered","document","body","style","cursor","quaternion","copy","material","lerp","set","onPointerOver","e","stopPropagation","onPointerOut","onPointerDown","index","Swal","fire","letterSpacing","Cloud","count","radius","useMemo","temp","spherical","phiSpan","thetaSpan","i","j","push","setFromSpherical","map","pos","word","App","canvasRef","fov","near","far","height","shadows","onCreated","scene","background","Stars","OrbitControls","enabled","maxPolarAngle","minPolarAngle","enablePan","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.76b740ed.chunk.js","sourcesContent":["import Swal from 'sweetalert2'\r\n\r\nimport { Stars, Sky, OrbitControls, Billboard, Text, Html, Plane, Sphere, softShadows } from \"@react-three/drei\"\r\nimport React, { useRef, Suspense, useEffect, useMemo, useState } from \"react\"\r\nimport { Canvas, extend, useThree, useFrame, useLoader } from \"@react-three/fiber\"\r\nimport { GLTFLoader } from \"three-stdlib\";\r\n//import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport * as THREE from \"three\";\r\nimport { Physics, useBox, usePlane, useSphere } from \"use-cannon\"\r\nimport { MeshStandardMaterial, SphereBufferGeometry } from \"three\";\r\nimport { useGLTF, PerspectiveCamera } from '@react-three/drei'\r\nimport { useSpring } from \"react-spring\";\r\n//extend({ OrbitControls })\r\nsoftShadows()\r\n\r\n\r\n\r\nconst HINT_PHRASE = \"Удачи на соревнованиях\"\r\n//14 words\r\nconst birthdayText = \"known. ever have I which girl best the and awesome most the are you Nika,\"\r\n\r\n\r\nconst word_list = birthdayText.split(\" \").reverse()\r\n\r\nfunction Heart(props) {\r\n  const { gl, camera } = useThree()\r\n  \r\n  //camera.position.x = 4000\r\n\r\n  const { x } = useSpring({\r\n    from: { x: 8000 },\r\n    to: { x: 10 },\r\n    config: {\r\n      mass: 1.5,\r\n      tension: 200,\r\n      friction: 140\r\n    },\r\n    delay: 3000,\r\n    onRest: () => props.setAnimationFinished(true)\r\n  });\r\n\r\n  const group = useRef()\r\n  const heart = useRef()\r\n  const { nodes, materials } = useLoader(GLTFLoader, \"models/heart.glb\");\r\n  console.log(nodes)\r\n\r\n  useEffect(()=>{\r\n    heart.current.scale.x = 0.1\r\n    heart.current.scale.y = 0.1\r\n    heart.current.scale.z = 0.1\r\n\r\n    group.current.rotation.y = 0\r\n    group.current.rotation.z = 0\r\n    group.current.rotation.x = -Math.PI/2\r\n  })\r\n\r\n  useFrame(({clock}) => {\r\n    const scale = 1 + Math.sin(clock.elapsedTime*1.5) * 0.05\r\n    //console.log(scale)\r\n    heart.current.rotation.z += 0.005\r\n    heart.current.scale.y = scale\r\n    heart.current.scale.x = scale\r\n    heart.current.scale.z = scale\r\n\r\n    if(!props.animationFinished){\r\n      camera.position.x = x.get()\r\n    }\r\n    \r\n  })\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null} scale={0.1}>\r\n      <mesh visible geometry={nodes.Heart.geometry} ref={heart} scale={0.1}> \r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          color=\"red\"\r\n          roughness={0.3}\r\n          metalness={0.3}\r\n        />\r\n      </mesh>\r\n      <LoveText rotation={[-Math.PI/2, group.current ? group.current.rotation.z : 0, -Math.PI]} position={[0, 0, 25]} fontSize={7}>Good luck, Nika! And have a good summer!</LoveText>\r\n    </group>\r\n  )\r\n}\r\n\r\nfunction LoveText({ rotation, children, fontSize, maxWidth, lineHeight, textAlign, position }) {\r\n  const textref = useRef()\r\n\r\n  const { camera } = useThree();\r\n  console.log(camera.rotation.y)\r\n  React.useEffect(() => {\r\n    textref.current.rotation.x = rotation[0]\r\n    textref.current.rotation.y = rotation[1]\r\n    textref.current.rotation.z = rotation[2]\r\n\r\n    textref.current.position.x = position[0]\r\n    textref.current.position.y = position[1]\r\n    textref.current.position.z = position[2]\r\n  })\r\n\r\n  useFrame(({camera}) => {\r\n    textref.current.rotation.y = -(camera.rotation.z+Math.PI)\r\n    //console.log(camera.rotation.z)\r\n  });\r\n  return (\r\n    <Text ref={textref} fontSize={fontSize && fontSize} maxWidth={maxWidth && maxWidth} lineHeight={lineHeight ? lineHeight : 1} textAlign={textAlign ? textAlign : \"left\"} font='/font.woff'>\r\n      {children}\r\n      <meshBasicMaterial\r\n        attach=\"material\"\r\n        side={THREE.DoubleSide}\r\n        color=\"red\"\r\n      />\r\n    </Text>\r\n  )\r\n}\r\n\r\nfunction MyLight(){\r\n  const lightRef = useRef()\r\n\r\n  \r\n  return(\r\n    <pointLight position={[10, 15, 10]} angle={0.3} intensity={0.5}\r\n        castShadow\r\n        shadowMapWidth={1024}\r\n        shadowMapHeight={1024}\r\n        ref={lightRef}\r\n        \r\n        />\r\n  )\r\n}\r\n\r\nfunction Word({ children, ...props }) {\r\n  const color = new THREE.Color()\r\n  const fontProps = { font: '/font.woff', fontSize: 3.5, letterSpacing: -0.05, lineHeight: 1, 'material-toneMapped': false }\r\n  const ref = useRef()\r\n  const [hovered, setHovered] = useState(false)\r\n  const over = (e) => (e.stopPropagation(), setHovered(true))\r\n  const out = () => setHovered(false)\r\n  // Change the mouse cursor on hover\r\n  useEffect(() => {\r\n    if (hovered) document.body.style.cursor = 'pointer'\r\n    return () => (document.body.style.cursor = 'auto')\r\n  }, [hovered])\r\n  // Tie component to the render-loop\r\n  useFrame(({ camera }) => {\r\n    // Make text face the camera\r\n    ref.current.quaternion.copy(camera.quaternion)\r\n    // Animate font color\r\n    ref.current.material.color.lerp(color.set(hovered ? '#fa2720' : '#0294f5'), 0.1)\r\n  })\r\n\r\n  function handleClick(){\r\n    if(children==\"Happy\" && props.index===97){\r\n      Swal.fire(\"Ураааа!\", `${HINT_PHRASE}`, \"success\")\r\n    }\r\n  }\r\n\r\n  return <Text ref={ref} onPointerOver={over} onPointerOut={out} onPointerDown={handleClick} {...props} {...fontProps} children={children}/>\r\n}\r\n\r\nfunction Cloud({ count = 10, radius = 20 }) {\r\n  // Create a count x count random words with spherical distribution\r\n  const words = useMemo(() => {\r\n    const temp = []\r\n    const spherical = new THREE.Spherical()\r\n    const phiSpan = Math.PI / (count + 1)\r\n    const thetaSpan = (Math.PI * 2) / count\r\n    for (let i = 1; i < count + 1; i++)\r\n      // Taken from https://discourse.threejs.org/t/can-i-place-obects-on-a-sphere-surface-evenly/4773/6\r\n      for (let j = 0; j < count; j++) temp.push([new THREE.Vector3().setFromSpherical(spherical.set(radius, phiSpan * i, thetaSpan * j)), word_list[j]])\r\n    return temp\r\n  }, [count, radius])\r\n  return words.map(([pos, word], index) => <Word key={index} position={pos} children={word} index={index}/>)\r\n}\r\n\r\nfunction App() {\r\n  const canvasRef = useRef()\r\n  const radius = 3600\r\n  const [animationFinished, setAnimationFinished] = useState(false)\r\n\r\n\r\n  return (\r\n    <Canvas ref={canvasRef} camera={{ fov: 75, near: 0.1, far: 8000, position: [9, 0, 5] }} style={{ height: \"100vh\" }}\r\n      shadows\r\n      \r\n      onCreated={({ gl, scene }) => {\r\n\r\n        scene.background = new THREE.Color('#000000')\r\n      }}>\r\n\r\n      <Stars />\r\n\r\n\r\n        <MyLight/>\r\n        <ambientLight intensity={0.3}/>\r\n      \r\n      \r\n\r\n      <OrbitControls enabled={animationFinished} maxPolarAngle={Math.PI/2} minPolarAngle={Math.PI/2} enablePan={false}/>\r\n\r\n      <Suspense fallback={null}><Heart setAnimationFinished={setAnimationFinished} animationFinished={animationFinished}/></Suspense>\r\n      \r\n      <Cloud count={15} radius={40} /> \r\n\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}